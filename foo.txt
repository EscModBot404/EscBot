 // bot.on('callback_query', async (callbackQuery) => {
//     const chatId = callbackQuery.message.chat.id;
//     const data = callbackQuery.data;
//     console.log(`Callback received: ${data}`);

//     if (data.startsWith('location_')) {
//         const location = data.split('_')[1];
//         updateUser(chatId, 'location', location);
//         updateUser(chatId, 'step', 'language');
//         await bot.sendMessage(chatId, `Your location has been updated to: ${location}`);
//         await bot.sendMessage(chatId, 'üåç What language do you speak?', {
//             reply_markup: {
//                 inline_keyboard: [
//                     [{ text: '–†—É—Å—Å–∫–∏–π', callback_data: 'language_Russian' }],
//                     [{ text: 'English', callback_data: 'language_English' }],
//                     [{ text: 'Polski', callback_data: 'language_Polish' }]
//                 ]
//             }});

//     } else if (data.startsWith('language_')) {
//         const languageMap = {
//             language_ru: 'ru',
//             language_en: 'en',
//             language_pl: 'pl'
//         };

//         const language = languageMap[data] || 'en';  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

//         updateUser(chatId, 'language', language);
//         updateUser(chatId, 'step', null);
//         console.log(`Language updated in DB for ${chatId}: ${language}`);

//         let message;
//         if (language === 'ru') {
//             message = '‚úÖ –Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: –†—É—Å—Å–∫–∏–π';
//         } else if (language === 'pl') {
//             message = '‚úÖ Zaktualizowano jƒôzyk na: Polski';
//         } else {
//             message = '‚úÖ Language updated to: English';
//         }

//         bot.sendMessage(chatId, message);
//     } else if (data === 'edit_info') {
//         updateUser(chatId, 'step', 'name');
//         await bot.sendMessage(chatId, 'Please provide your name:');

//     } else if (data === 'model_prev' || data === 'model_next') {
//         handleModelNavigation(bot, callbackQuery);

//     } else if (data === 'choose_list') {
//         handleChooseModel(bot, chatId);

//     } else if (data === 'choose_random') {
//         getRandomModels(bot, chatId);
//         await pause(2400);
//         bot.sendMessage(chatId, 'Choose a model selection method:', {
//             reply_markup: {
//                 inline_keyboard: [
//                     [{ text: 'Model List', callback_data: 'choose_list' }],
//                     [{ text: 'Random Selection', callback_data: 'choose_random' }],
//                     [{ text: 'Filter Selection', callback_data: 'choose_filter' }],
//                 ],
//             },
//         });

//     } else if (data === 'choose_filter' || data === 'filter_completed') {
//         sendUserFilterTemplate(bot, chatId);

//     } else if (data === 'apply_filter') {
//         getUserFilter(chatId, (err, filter) => {
//             if (err || !filter || filter.height === '‚Äî') {
//                 console.log(`–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
//                 bot.sendMessage(chatId, '‚ùå You have no saved filter. Please create one first.');
//             } else {
//                 console.log(`–§–∏–ª—å—Ç—Ä –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π:`, filter);
//                 findModelsByFilter(bot, chatId, filter);
//             }
//         });

//     } else if (data === 'model_prev_filtered' || data === 'model_next_filtered') {
//         handleFilteredModelNavigation(bot, callbackQuery);
//     }else if (data === 'update_filter' || data === 'create_new_filter') {
//         startModelFilter(bot, chatId);

//     } else {
//         processFilterSelection(bot, callbackQuery);
//     }

//     bot.answerCallbackQuery(callbackQuery.id);
// });