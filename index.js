require('dotenv').config(); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
const fs = require('fs');
const Telegram_Api = require('node-telegram-bot-api');
const { ensureUserExists, updateUser, getUser,getUserFilter } = require('./User_db');
const { handleChooseModel, handleModelNavigation } = require('./chooseModel');
const { getRandomModels } = require('./chooseModel');
const { startModelFilter, processFilterSelection,sendUserFilterTemplate } = require('./chooseModel');
const { findModelsByFilter,handleFilteredModelNavigation} = require('./chooseModel');
const { userInfo } = require('os');
const token = process.env.TELEGRAM_TOKEN;
const bot = new Telegram_Api(token, { polling: true });


const getUserLanguage = (chatId, callback) => {
    getUser(chatId, (err, user) => {
        if (err || !user) {
            callback('en'); // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —è–∑—ã–∫ - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        } else {
            callback(user.language || 'en');
        }
    });
};

bot.setMyCommands([
    
    { command: '/manager',description: 'Communicate with our manager'},
    { command: '/myinfo', description: 'View/change info about you' },
    { command: '/choosemodel', description: 'Choose a model' },
    { command: '/changelocation', description: 'Change your location' },
    { command: '/changelanguage', description: 'Change your language' },
    { command: '/start', description: 'Start interacting with the bot' },
]);
 
const pause = (milliseconds) => {
    return new Promise(resolve => setTimeout(resolve, milliseconds));
};
 
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    ensureUserExists(chatId);
    getUser(chatId, (err, user) => {
        if (err || !user) {
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }

        const userLanguage = user.language || 'en';

        if (user.step === 'name') {
            updateUser(chatId, 'name', text);
            updateUser(chatId, 'step', 'age');
            const askAge = userLanguage === 'ru' ? '–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?' : userLanguage === 'pl' ? 'Ile masz lat?' : 'How old are you?';
            bot.sendMessage(chatId, askAge);
        } else if (user.step === 'age') {
            const age = parseInt(text, 10);
            if (isNaN(age) || age <= 0) {
               
                return;
            }
            updateUser(chatId, 'age', age);
            updateUser(chatId, 'step', 'location');
            const askLocation = userLanguage === 'ru' ? '–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?' : userLanguage === 'pl' ? 'Gdzie jeste≈õ?' : 'Where are you located?';
            bot.sendMessage(chatId, askLocation, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'Warsaw', callback_data: 'location_Warsaw' }],
                        [{ text: 'Dubai', callback_data: 'location_Dubai' }],
                        [{ text: 'Milan', callback_data: 'location_Milan' }],
                    ]
                }
            });
        } else {
            return;
        }
    });
    getUserLanguage(chatId, async (userLanguage) => {
        let response;

        switch (text) {
            case '/start':
                response = userLanguage === 'ru' ? '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?' :
                           userLanguage === 'pl' ? 'Cze≈õƒá! Jak siƒô masz?' :
                           'Hello! How are you?';
                break;
            case '/myinfo':
                getUser(chatId, (err, row) => {
                    if (err) {
                        const errorMessage = userLanguage === 'ru' ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.' :
                                             userLanguage === 'pl' ? 'WystƒÖpi≈Ç b≈ÇƒÖd. Spr√≥buj ponownie p√≥≈∫niej.' :
                                             'An error occurred. Please try again later.';
                        bot.sendMessage(chatId, errorMessage);
                        return;
                    }
                
                    const infoTitle = userLanguage === 'ru' ? '–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' :
                                      userLanguage === 'pl' ? 'Twoje informacje' :
                                      'Your information';
                
                    const nameLabel = userLanguage === 'ru' ? '–ò–º—è' :
                                      userLanguage === 'pl' ? 'Imiƒô' :
                                      'Name';
                
                    const ageLabel = userLanguage === 'ru' ? '–í–æ–∑—Ä–∞—Å—Ç' :
                                     userLanguage === 'pl' ? 'Wiek' :
                                     'Age';
                
                    const locationLabel = userLanguage === 'ru' ? '–ì–æ—Ä–æ–¥' :
                                          userLanguage === 'pl' ? 'Miasto' :
                                          'Location';
                
                    const languageLabel = userLanguage === 'ru' ? '–Ø–∑—ã–∫' :
                                          userLanguage === 'pl' ? 'Jƒôzyk' :
                                          'Language';
                
                    let response = `
                <b>${infoTitle}:</b>
                <b>${nameLabel}:</b> ${row.name || '-'}
                <b>${ageLabel}:</b> ${row.age || '-'}
                <b>${locationLabel}:</b> ${row.location || '-'}
                <b>${languageLabel}:</b> ${row.language || '-'}
                    `;
                
                    const updateButtonText = userLanguage === 'ru' ? '–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é' :
                                             userLanguage === 'pl' ? 'Zaktualizuj informacje' :
                                             'Update Info';
                
                    bot.sendMessage(chatId, response, {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: updateButtonText, callback_data: 'edit_info' }]
                            ]
                        }
                    });
                });
                
                return;
            case '/choosemodel':
                response = userLanguage === 'ru' ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏:' :
                userLanguage === 'pl' ? 'Wybierz metodƒô wyboru modelki:' :
                'Choose a model selection method:';
 
     const modelListText = userLanguage === 'ru' ? '–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π' :
                           userLanguage === 'pl' ? 'Lista modelek' :
                           'Model List';
 
     const randomSelectionText = userLanguage === 'ru' ? '–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä' :
                                 userLanguage === 'pl' ? 'Losowy wyb√≥r' :
                                 'Random Selection';
 
     const filterSelectionText = userLanguage === 'ru' ? '–í—ã–±–æ—Ä –ø–æ —Ñ–∏–ª—å—Ç—Ä—É' :
                                 userLanguage === 'pl' ? 'Wyb√≥r wed≈Çug filtra' :
                                 'Filter Selection';
 
     bot.sendMessage(chatId, response, {
         reply_markup: {
             inline_keyboard: [
                 [{ text: modelListText, callback_data: 'choose_list' }],
                 [{ text: randomSelectionText, callback_data: 'choose_random' }],
                 [{ text: filterSelectionText, callback_data: 'choose_filter' }]
             ]
         }
     });
                return;
            case '/changelocation':
                response = userLanguage === 'ru' ? '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:' :
                           userLanguage === 'pl' ? 'Wybierz nowe miasto:' :
                           'Please choose your new location:';
                bot.sendMessage(chatId, response, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'Warsaw', callback_data: 'location_Warsaw' }],
                            [{ text: 'Dubai', callback_data: 'location_Dubai' }],
                            [{ text: 'Milan', callback_data: 'location_Milan' }],
                        ]
                    }
                });
                return;
            case '/changelanguage':
                response = userLanguage === 'ru' ? 'üåç –ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ?' :
                           userLanguage === 'pl' ? 'üåç Jaki jƒôzyk preferujesz?' :
                           'üåç What language do you speak?';
                bot.sendMessage(chatId, response, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–†—É—Å—Å–∫–∏–π', callback_data: 'language_ru' }],
                            [{ text: 'English', callback_data: 'language_en' }],
                            [{ text: 'Polski', callback_data: 'language_pl' }],
                        ]
                    }
                });
                return;
            case '/manager':
                response = userLanguage === 'ru' ? '–°–∫–æ—Ä–æ' :
                           userLanguage === 'pl' ? 'Wkr√≥tce' :
                           'Soon';
                break;
            default:
                 return;
        }
        bot.sendMessage(chatId, response);
    });
});


bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    console.log(`Callback received: ${data}`);

    getUser(chatId, async (err, user) => {
        const userLanguage = user?.language || 'en';

        if (data.startsWith('location_')) {
            const location = data.split('_')[1];
            updateUser(chatId, 'location', location);
            updateUser(chatId, 'step', 'language');

            const locationMessage = userLanguage === 'ru' ? `–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${location}` :
                                    userLanguage === 'pl' ? `Twoja lokalizacja zosta≈Ça zaktualizowana: ${location}` :
                                    `Your location has been updated to: ${location}`;
            
            await bot.sendMessage(chatId, locationMessage);
            
            const languageMessage = userLanguage === 'ru' ? 'üåç –ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ?' :
                                    userLanguage === 'pl' ? 'üåç Jaki jƒôzyk preferujesz?' :
                                    'üåç What language do you speak?';
            
            await bot.sendMessage(chatId, languageMessage, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–†—É—Å—Å–∫–∏–π', callback_data: 'language_ru' }],
                        [{ text: 'English', callback_data: 'language_en' }],
                        [{ text: 'Polski', callback_data: 'language_pl' }]
                    ]
                }
            });
        } else if (data.startsWith('language_')) {
            const languageMap = {
                language_ru: 'ru',
                language_en: 'en',
                language_pl: 'pl'
            };

            const language = languageMap[data] || 'en';  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

            updateUser(chatId, 'language', language);
            updateUser(chatId, 'step', null);
            console.log(`Language updated in DB for ${chatId}: ${language}`);

            const message = language === 'ru' ? '‚úÖ –Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: –†—É—Å—Å–∫–∏–π' :
                            language === 'pl' ? '‚úÖ Zaktualizowano jƒôzyk na: Polski' :
                            '‚úÖ Language updated to: English';

            bot.sendMessage(chatId, message);
        } else if (data === 'edit_info') {
            updateUser(chatId, 'step', 'name');
            bot.sendMessage(chatId, userLanguage === 'ru' ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:' : userLanguage === 'pl' ? 'Podaj swoje imiƒô:' : 'Please provide your name:');
        } else if (data === 'choose_list') {
            handleChooseModel(bot, chatId);
        } else if (data === 'model_prev' || data === 'model_next') {
            handleModelNavigation(bot, callbackQuery);
        }else if (data === 'choose_random') {
            getRandomModels(bot, chatId);
            await pause(5000);
            response = userLanguage === 'ru' ? '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏:' :
            userLanguage === 'pl' ? 'Wybierz metodƒô wyboru modelki:' :
            'Choose a model selection method:';

 const modelListText = userLanguage === 'ru' ? '–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π' :
                       userLanguage === 'pl' ? 'Lista modelek' :
                       'Model List';

 const randomSelectionText = userLanguage === 'ru' ? '–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä' :
                             userLanguage === 'pl' ? 'Losowy wyb√≥r' :
                             'Random Selection';

 const filterSelectionText = userLanguage === 'ru' ? '–í—ã–±–æ—Ä –ø–æ —Ñ–∏–ª—å—Ç—Ä—É' :
                             userLanguage === 'pl' ? 'Wyb√≥r wed≈Çug filtra' :
                             'Filter Selection';

 bot.sendMessage(chatId, response, {
     reply_markup: {
         inline_keyboard: [
             [{ text: modelListText, callback_data: 'choose_list' }],
             [{ text: randomSelectionText, callback_data: 'choose_random' }],
             [{ text: filterSelectionText, callback_data: 'choose_filter' }]
         ]
     }
 });
            
            
        } else if (data === 'choose_filter' || data === 'filter_completed') {
            sendUserFilterTemplate(bot, chatId);
        } else if (data === 'apply_filter') {
            getUserFilter(chatId, (err, filter) => {
                if (err || !filter || filter.height === '‚Äî') {
                    const noFilterMessage = userLanguage === 'ru' ? '‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ.' :
                                            userLanguage === 'pl' ? '‚ùå Nie masz zapisanego filtra. Najpierw go utw√≥rz.' :
                                            '‚ùå You have no saved filter. Please create one first.';
                    bot.sendMessage(chatId, noFilterMessage);
                } else {
                    console.log(`–§–∏–ª—å—Ç—Ä –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π:`, filter);
                    findModelsByFilter(bot, chatId, filter);
                }
            });
        } else if (data === 'model_prev_filtered' || data === 'model_next_filtered') {
            handleFilteredModelNavigation(bot, callbackQuery);
        }else if (data === 'update_filter' || data === 'create_new_filter') {
            startModelFilter(bot, chatId);
        } else {
            processFilterSelection(bot, callbackQuery);
        }

        bot.answerCallbackQuery(callbackQuery.id);
    });
});


console.log('Bot is running...');



